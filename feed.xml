<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>The Portfolio &amp; Writings of Bill Chambers</title>
		<description></description>		
		<link></link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Thoughts on Shutting Down Projects and Looking to 2019</title>
				<description>&lt;h1&gt;Thoughts on a Project Shutdown: Spark Tutorials&lt;/h1&gt;

&lt;p&gt;After having sparktutorials.net up for several years, it&amp;#39;s time to shut it down. I haven&amp;#39;t written for the site in years at this point and it&amp;#39;s not doing me any good now that I have &lt;a href=&quot;https://github.com/databricks/Spark-The-Definitive-Guide&quot;&gt;The Definitive Guide&lt;/a&gt; published.&lt;/p&gt;

&lt;p&gt;Interestingly, I (knowingly) haven&amp;#39;t published on the site for nearly 3 years. Why did I keep it up? There isn&amp;#39;t necessarily a straightforward answer. I likely kept it up because it represented something. It represented how I got to where I was by taking a chance and launching and iterating. That makes it hard to shut it down. It represents a part of me. that&amp;#39;s going to be hard to let go.&lt;/p&gt;

&lt;p&gt;This project was a great project because it helped me land the job at Databricks that I have greatly enjoyed and grown in. When I started the site, I didn&amp;#39;t take anything for granted, I busted ass and did research on the posts that I published. It still generates thousands of page views but at this point with hosting, the domain, etc., it&amp;#39;s just not worth hosting any longer.&lt;/p&gt;

&lt;p&gt;This project did provide an amazing training experience for interviews. Moreover, it got me some exposure. People constantly reached out to me about consulting and training - something that was extremely rewarding.&lt;/p&gt;

&lt;p&gt;But with that, it has served its purpose and while I&amp;#39;m still proud of the accomplishment, there&amp;#39;s no point in living in the past. It&amp;#39;s done and it&amp;#39;s time to move onto new things.&lt;/p&gt;

&lt;h1&gt;On to the next project(s)&lt;/h1&gt;

&lt;p&gt;I&amp;#39;ve wanted to start a new project for the last 6 months. I&amp;#39;ve experimented with a number of projects but at this point, nothing has totally stuck. Therefore, it&amp;#39;s time to simplify.&lt;/p&gt;

&lt;p&gt;One thing that I used to do all of the time was write. The book sapped that from me a little bit or at least channeled it in a very focused manner. It&amp;#39;s time for me to return to writing more often, writing up tutorials, doing my own research and returning to what got me here in the first place: hustle.&lt;/p&gt;

&lt;p&gt;For 2019, my goal is to start small and just start publishing posts on a regular basis. From there, we&amp;#39;ll get into meatier and meatier projects.&lt;/p&gt;

&lt;p&gt;Start small and get regular. Then move onto bigger and better things.&lt;/p&gt;
</description>
				<pubDate>Mon, 24 Dec 2018 00:00:00 -0800</pubDate>
				<link>/projects/2018/12/24/shutting-down-spark-tutorials-new-projects-2019.html</link>
				<guid isPermaLink="true">/projects/2018/12/24/shutting-down-spark-tutorials-new-projects-2019.html</guid>
			</item>
		
			<item>
				<title>Thoughts on 'The Black Swan' by Nassim Taleb</title>
				<description>&lt;p&gt;This was my second time reading The Black Swan by Nassim Taleb although admittedly I think I was a bit young the first time to fully absorb the content. That is not to say that I didn&amp;#39;t get the TL;DR of &amp;quot;hey sometimes stuff happens that you can&amp;#39;t predict that&amp;#39;s meaningful&amp;quot;, but what I missed was a lot of the nuance in the actual applcation of the principles to my life.&lt;/p&gt;

&lt;p&gt;This blog post does not proclaim to explain all that Taleb hopes to communicate nor at this point can I hope to fully understand it. This post is primarily for my own benefit. By writing it, I hope to understand my thoughts for future reference and to help formalize my understanding of the concepts.&lt;/p&gt;

&lt;h3&gt;Some Core Ideas&lt;/h3&gt;

&lt;p&gt;He starts of quite strong stating that his thoughts on the book are that they are a &amp;quot;philosophical treatise on the weaknesses of the human mind&amp;quot;. This is a powerful thought that sets a great tone for the discussions and examples in the book.&lt;/p&gt;

&lt;h4&gt;Absense of evidence is not evidence of absense&lt;/h4&gt;

&lt;p&gt;This is probably my favorite point and one that has changed how I make decisions. The statement is quite simple, the implications and the application to your life is not. &lt;/p&gt;

&lt;p&gt;This is most often due to the &lt;em&gt;narrative fallacy&lt;/em&gt;, human nature&amp;#39;s desire to spill tales to help us comprehend the world. For one reason or another, this concept did not stick with me the first time I read the book. However, this particular fallacy has clung to me like a barnacle on a ship&amp;#39;s hull. Powerfully, this fallacy applies directly to history (my college major). &lt;/p&gt;

&lt;p&gt;Our narrative of history is wrong. Period. History is written by the winners, by those that choose to impose their biases, thoughts, preconceptions and desires on future audiences. A narrative is simply too powerful for people to avoid. In fact, sense-making is a narrative process; thus we are likely committing this fallacy simply by &lt;em&gt;trying to make sense of events&lt;/em&gt; that are fundamentally insensible. &amp;quot;The more we try to turn to history into anything other than an enumeration of accounts to be enjoyed with minimal theorizing, the more we get into trouble&amp;quot;.&lt;/p&gt;

&lt;p&gt;The narrative landmine perfectly communicates why this point is so important. It&amp;#39;s simple for us to try to argue that an absense of evidence is evidence of absense. I&amp;#39;ve never seen a million dollars in cash so a million dollars in cash must not exist! I&amp;#39;ve only seen white swams so there must not be any other colored swans! These simple examples communicate the point. The problem is that when you treat the former as the latter, especially when you&amp;#39;re putting something on the line, you&amp;#39;re exposing yourself to a risk that cannot be predicted.&lt;/p&gt;

&lt;p&gt;As another example, the turkey problem perfectly illustrates what this can mean.&lt;/p&gt;

&lt;h4&gt;The Turkey Problem&lt;/h4&gt;

&lt;p&gt;You are a turkey. You wake up everyday and are fed. This happens for days, weeks, and then months. As the leaves turn and winter approaches, what can you reasonably expect?&lt;/p&gt;

&lt;p&gt;If you are a turkey, you expect to be fed. That is all that you know and any &amp;quot;reasonable&amp;quot; forecast would say that food will come at the same time the next day. Unfortunately, the next day is thanksgiving and on that day an event more significant than all others happens and you are killed.&lt;/p&gt;

&lt;p&gt;The absense of evidence for your demise, is not evidence of the absense of said demise. It just means you haven&amp;#39;t seen it. Your model of the world &amp;quot;food in the morning may be right&amp;quot; but the game might not be what you think it is.&lt;/p&gt;

&lt;h4&gt;Mediocristan vs Extremistan&lt;/h4&gt;

&lt;p&gt;There are two worlds of randomness: mediocristan and extremistan.&lt;/p&gt;

&lt;p&gt;Mediocristan is a well-behaved world. In this world, &lt;em&gt;gaussian randomness&lt;/em&gt; prevails. This means that the &amp;quot;law of large numbers rules&amp;quot; and that sum of all random parts results in smoothness. These are the well-behaved random variables, they&amp;#39;re smooth and easy to model.&lt;/p&gt;

&lt;p&gt;Mediocristan is human heights. If you were to take all the people on the plane that I am on and line them up to one another by height, we could then calculate an average. This average would be well-behaved and reflective of the population we are modeling. Removing a single individual (or adding another one) won&amp;#39;t affect the average drastically.&lt;/p&gt;

&lt;p&gt;Extremistan, on the other hand, is a strange world. In this world, &lt;em&gt;mandelbrotian randomness&lt;/em&gt; prevails. The law of large numbers does not apply here. Recursive patterns of randomness generate arbitrary complexity making it impossible (shelf this for later...) to predict what exactly will happen. In this world, &amp;quot;to understand the future enought to predict it, you need to incorporate elements of this future itself&amp;quot;.&lt;/p&gt;

&lt;p&gt;Extdremistan is human income. If you were to take all the people on the plane that I am on and line them up to one another by income, we could then calculate an average. This average, however, would be very fragile to removing of outlier individuals. For instance, one might wager that there are individuals on this plane that have more money than the entire rest of the plane combined.&lt;/p&gt;

&lt;p&gt;These two worlds behave drastically different and have different implications. For instance, losses in extremistan can be huge and impossible to model. Losses in mediocristan are predictable and, by property of the standard deviation, scoped. While in theory there exists a person 12 feet tall, in practice I will never encounter this individual and so I have no reason to worry about it. The same cannot be said for wealth and things that are calculated as opposed to natural. Wealth can disappear or appear in an instant, your height cannot. &lt;/p&gt;

&lt;h4&gt;The Ludic Fallacy&lt;/h4&gt;

&lt;p&gt;This one is particulary important for the student of data analysis. It&amp;#39;s quite simple. The Ludic Fallacy is when you think a game represents well the world you are trying to model. For instance, the random walk model in modern finance is not justified - even if it &lt;em&gt;appears&lt;/em&gt; to conform to that model based on historicaly data. &amp;quot;A model may be right but maybe the game is different than anticipated&amp;quot;.&lt;/p&gt;

&lt;p&gt;Quite simply, it doesn&amp;#39;t matter if your model is right or write. &amp;quot;What matters is not how often you are right, but houw large your cumulative errors are&amp;quot;. Quite simply, if you have super simple model that prevents massive errors, you&amp;#39;re better off than a complex model that is very accurate in the common case but wildly off in the all important outlier case.&lt;/p&gt;

&lt;p&gt;As soon as you change the assumptions embedded in your model, the model can fail spectacularly. Therefore, avoid these assumptions.&lt;/p&gt;

&lt;h4&gt;Skin in the Game and Expert Problems&lt;/h4&gt;

&lt;p&gt;The export problem exists in &amp;quot;professions that deal with the future and base studies on the non-repeatable past&amp;quot;. These professions are perfectly setup for the prior fallacies that we discussed and the retroactive explainability of extreme events.&lt;/p&gt;

&lt;p&gt;Finance is a perfect example (for Taleb), you simply cannot repeat the past and therefore &amp;quot;to understand the future enough to predict it, you need to incorporate elements of this future itself&amp;quot;. However, I would also think that startups and technology are other examples. It&amp;#39;s super hard to predict which companies will be successful, in fact the assumptions in these models are often wrong. However, startups are a perfect case of &amp;quot;retroactive explainability&amp;quot; where hindsight bias makes it seem like it was all so obvious that a particular thing (or company would succeed).&lt;/p&gt;

&lt;p&gt;Skin in the game arises a solution to the expert problem. With &amp;quot;experts&amp;quot; in these sorts of professions or areas, those very experts should put their money where their mouth is. In short, &amp;quot;advice is cheap&amp;quot;. These experts don&amp;#39;t actually have any skin in the game and because they do not, they do not suffer the consequences of their loss. This incentivizes the wrong things, in fact, it incentivizes talk not action.&lt;/p&gt;

&lt;h4&gt;Swans&lt;/h4&gt;

&lt;p&gt;The title alludes to this, so it&amp;#39;s somewhat obvious but a final take-away is that of black swans - events that are unpredictable, consequential, and have retroactive explainability. These events cannot be predicted, period. The least we can hope to do is make them &lt;em&gt;grey swans&lt;/em&gt; or &amp;quot;modelable extreme events&amp;quot; or something akin to known unknowns. Black swans are the unknown unknowns.&lt;/p&gt;

&lt;h3&gt;Conclusion and my key take aways&lt;/h3&gt;

&lt;p&gt;This is one of my favorite books or ideas. While the style of writing does not match my own exactly, I do appreciate it. One thing that seems to repeat itself is that people I respect often focus on the importance of decision making. What makes me &lt;em&gt;admire&lt;/em&gt; someone is their own ability to admittedly discuss the faults in their own decision making. Taleb firmly falls in the latter category.&lt;/p&gt;

&lt;p&gt;Let me return to my takeaways. I think the most concrete is that being practical is better than theoretical. Prove something out with repeatable data and go from there. Success consists of avoiding losses, not necessarily trying to derive profit. Therefore it behooves an individual to invest in preparedness, not in prediction and to rank beliefs not by our certainty in them but by the harm that they may cause if our assumptions are wrong.&lt;/p&gt;

&lt;p&gt;One key takeaway, that makes me fault my own decision making, is that of &amp;quot;retroactive explainability&amp;quot;. I dove into this point under the &amp;quot;absense of evidence&amp;quot; bit, but I think this is a fault of my own decision making. Having studied history, you try to explain things as a narrative - because that&amp;#39;s how we reason about things. This is not a good habit because these are not repeatable - it&amp;#39;s an excellent example of the expert problem! This shortcoming of mine is something that I actively unlearn.&lt;/p&gt;

&lt;p&gt;There are lots of lessons that would bore others to read (if anyone even reads this :)) but they&amp;#39;re there still. Fittingly, an absense of evidence is not evidence of absense.&lt;/p&gt;
</description>
				<pubDate>Fri, 16 Feb 2018 00:00:00 -0800</pubDate>
				<link>/essays/2018/02/16/thoughts-on-the-black-swan-by-nassim-taleb.html</link>
				<guid isPermaLink="true">/essays/2018/02/16/thoughts-on-the-black-swan-by-nassim-taleb.html</guid>
			</item>
		
			<item>
				<title>Spark: The Definitive Guide published by O'Reilly!</title>
				<description>&lt;p&gt;As of February 6th, 2018, &lt;a href=&quot;http://shop.oreilly.com/product/0636920034957.do&quot;&gt;Spark: The Definitive Guide&lt;/a&gt; has gone to print. This was the most intensive project and process that I&amp;#39;ve ever undertaken in my life. It was filled with frustrations and anticipations, excitements and fears. I must extend thanks to those that encouraged me to lead the writing of the book, namely Ion Stoica, Patrick Wendell, Ali Ghodsi, and (somewhat obviously) Matei Zaharia. These folks were the ones that recommended that I take the lead on the book and I am forever grateful for them to grant me such an opportunity.&lt;/p&gt;

&lt;p&gt;In particular, I would like to thank my co-author, &lt;a href=&quot;https://cs.stanford.edu/%7Ematei/&quot;&gt;Matei Zaharia&lt;/a&gt;, for his help and graciousness throughout the writing process.&lt;/p&gt;

&lt;h3&gt;How it got done&lt;/h3&gt;

&lt;p&gt;Writing the book was simple. &lt;a href=&quot;https://www.infoq.com/presentations/Simple-Made-Easy&quot;&gt;Simple is not easy.&lt;/a&gt;. You have to churn out a lot of words and then refine them for the audience. It&amp;#39;s really that simple.&lt;/p&gt;

&lt;p&gt;Matei and I had a core thesis from the beginning. ~80% of value should be in the first ~20% of the book or in other terms, 80% of the readers will only read the first 80 pages of the book. The reason is straightforward, the vast majority of the audience will read through the beginning and then cherry pick relevant sections after that. Importantly, &lt;em&gt;we were 100% ok with that!&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;For this reason, the first part of the book(approximately 80 pages) is narrative explaining Spark&amp;#39;s background and the fundamental concepts. We focused on the simplest explanations, eschewing technical jargon in order to make it approachable to the largest audience.&lt;/p&gt;

&lt;p&gt;The first two months of the &amp;quot;writing&amp;quot; process were focused on organizational concepts - how can we ensure that we&amp;#39;re going to cover all the topics that we need to in a coherent manner? It became readily apparent that length was going to be an issue. Spark is an immensely capable system taking the &amp;quot;standard library&amp;quot; approach towards big data. For this reason, it has an &lt;em&gt;massive&lt;/em&gt; set of capabilities. Capabilities that we improve upon at Databricks with the Databricks Runtime.&lt;/p&gt;

&lt;p&gt;After laying out the general organizational structure of introduction, Spark SQL, streaming, machine learning, and then the ecosystem we were ready to get started.&lt;/p&gt;

&lt;h4&gt;Part 1: The First Draft&lt;/h4&gt;

&lt;p&gt;Instead of trying to get every chapter perfect (as some of the early readers may have noticed), we took the approach of a more turbulent process. From November 2016 to mid 2017, I wrote the first draft of a given chapter in each week for the book. A chapter a week, good or bad, was my commitment. Naturally, some chapters ended up quite bad at the onset.&lt;/p&gt;

&lt;p&gt;One powerful note, is that we wrote the entire book inside of Databricks notebooks because it made it easy to write with various languages and test the code that I&amp;#39;m writing - all in one narrative notebook.&lt;/p&gt;

&lt;p&gt;After writing several chapters, Matei and I would read through the chapters and write up our edits in order to make sure that we&amp;#39;re aligned on tone, content, and direction. This process was excellent. The raw first drafts helped sketch some lines out and make sure that we were on the same page about what we wanted to achieve. This was the &amp;quot;dry-run&amp;quot; of reviewing before we were ready to send them all the reviewers.&lt;/p&gt;

&lt;p&gt;The ideal would have been to write a draft of the book and work from there, however, batching was necessary for our excellent reviewers to make progress reading and editing the book themselves.&lt;/p&gt;

&lt;h4&gt;Part 2: Reviewing&lt;/h4&gt;

&lt;p&gt;After getting feedback from our reviewers, it came time to integrate that feedback. This was a labor-intensive process requiring me to diff the various comments from our reviewers. Making one change meant that other proposed changes might be affected as well making it hard to keep track of what was and was not fixed. This part took longer than I hoped as the feedback was good and some rather obvious issues had to be resolved.&lt;/p&gt;

&lt;p&gt;Upon completion of review edits as well as our own changes, we realized that the book length issues had gotten worse. We were at 650+ pages (on what was expected to be a 450 page book).&lt;/p&gt;

&lt;h4&gt;Part 3: Editing &amp;amp; Quality Control&lt;/h4&gt;

&lt;p&gt;By the time quality control comes around, we had been working on the book for over a year. By this time my &amp;quot;light PM workload&amp;quot; had fully vaporized and I was in the throws of working on &lt;a href=&quot;https://databricks.com/blog/2017/10/25/databricks-delta-a-unified-management-system-for-real-time-big-data.html&quot;&gt;Databricks Delta&lt;/a&gt; and another two teams full time. Matei had returned to teaching as well as the Stanford year picked up and so we were both short time. &lt;/p&gt;

&lt;p&gt;This part of the book was probably the most difficult. It was extremely arguous and painful while still being inspiring and rewarding. It felt like a battle of inches. Where the finest of details have to be ironed out in a coherent and consistent way. Our production editor, &lt;a href=&quot;https://www.linkedin.com/in/justin-billing-4948467b/&quot;&gt;Justin Billing&lt;/a&gt; did an incredible job helping us along this path. With time, we hacked the length down, removing detail where we could, and focused on keeping the book extremely high quality and in depth. This was terribly challenging as there is just so much to cover - especially for a definitive guide.&lt;/p&gt;

&lt;p&gt;After a much time, we finally landed at 600 pages and after two quality control periods - we completed the entire book on February 6th, 2018.&lt;/p&gt;

&lt;h3&gt;What it means that it got done?&lt;/h3&gt;

&lt;p&gt;This book was an unbelievable effort not just because writing a book is hard but because Spark is an &lt;em&gt;amazing&lt;/em&gt; tool. It&amp;#39;s used everywhere but so many companies out there. If you&amp;#39;re doing big data, you&amp;#39;re probably doing Spark. Those are facts. What we are most proud of is that this will greatly enable the community to grow and for new people to learn about and use the toolkit to solve the problems that they would like to solve.&lt;/p&gt;

&lt;p&gt;The fact that thousands of eyeballs will read those words is incredibly rewarding in and of itself. The fact that people will use that to do their jobs day in and day out makes it even more so.&lt;/p&gt;

&lt;p&gt;Matei and I sincerely hope that you enjoy the book and thanks so much for reading!&lt;/p&gt;
</description>
				<pubDate>Thu, 08 Feb 2018 00:00:00 -0800</pubDate>
				<link>/projects/2018/02/08/Spark-The-Definitive-Guide.html</link>
				<guid isPermaLink="true">/projects/2018/02/08/Spark-The-Definitive-Guide.html</guid>
			</item>
		
			<item>
				<title>Introducing SparkTutorials.net</title>
				<description>&lt;p&gt;I&amp;#39;ve recently launched a website called &lt;a href=&quot;http://www.sparktutorials.net&quot;&gt;SparkTutorials.net&lt;/a&gt;. Spark Tutorials aims to educate the general public about the utility of Spark as a tool for data science. I would encourage you to read more on the website and learn something new!&lt;/p&gt;
</description>
				<pubDate>Thu, 10 Sep 2015 00:00:00 -0700</pubDate>
				<link>/projects/2015/09/10/introducing-spark-tutorials.html</link>
				<guid isPermaLink="true">/projects/2015/09/10/introducing-spark-tutorials.html</guid>
			</item>
		
			<item>
				<title>A Simple Link Shortener in Scala</title>
				<description>&lt;p&gt;&lt;em&gt;Recently I took it upon myself to dive into Scala. This post describes what my reaction was after writing a link shortener service using it. For those only interested in the code, &lt;a href=&quot;https://github.com/anabranch/JVM-Link-Shorteners/tree/master/scala-link-shortener&quot;&gt;check out my github&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After learning the basics of &lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt; by writing a simple link shortener, I realized that it was a great way to get to know a language. So I decided to do the same in &lt;a href=&quot;http://www.scala-lang.org/&quot;&gt;Scala&lt;/a&gt;. Scala is probably the most professional language I&amp;#39;ve used. It gives you a ton of options and you can really do things the way that you want to. This is a blessing and a curse, it&amp;#39;s complicated but gives you a lot of tools.&lt;/p&gt;

&lt;p&gt;In Scala&amp;#39;s own words:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Object-Oriented Meets Functional&lt;/p&gt;

&lt;p&gt;Have the best of both worlds. Construct elegant class hierarchies for maximum code reuse and extensibility, implement their behavior using higher-order functions. Or anything in-between.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I, again, forced a couple of requirements, I wanted to &lt;code&gt;jar&lt;/code&gt; it and be able to deploy it, I wanted it to connect to &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt; in order to store shortened links, and I wanted to make sure that I could deploy it with&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;. Lastly I wanted to make sure that I wrote tests as well.&lt;/p&gt;

&lt;p&gt;What I love about the link shortener application is that you&amp;#39;re going to run into plenty of little challenges writing the application.&lt;/p&gt;

&lt;p&gt;You&amp;#39;ll touch on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The documentation for the language itself&lt;/li&gt;
&lt;li&gt;The build tools&lt;/li&gt;
&lt;li&gt;Web app frameworks in the language&lt;/li&gt;
&lt;li&gt;Simple regular expressions in the language (url validation)&lt;/li&gt;
&lt;li&gt;HTML templating&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now this isn&amp;#39;t something that will take very long assuming you have basic programming skill and if you&amp;#39;re looking for more of a challenge there are tons of ways to add onto this application. One of the requirements is that code and tutorials are not to be followed - I made myself write it from scratch.&lt;/p&gt;

&lt;p&gt;After writing it I realized things are certainly a bit different in Scala. I decided to use &lt;a href=&quot;http://scalatra.org/&quot;&gt;Scalatra&lt;/a&gt;. It seems relatively straightforward but dealing with the actor paradigm is certainly a departure from what I&amp;#39;m used to. The first concept I really had to wrestle with was that of a Servlet and Servlet Context. A servlet is simply a way of running a webserver and responding to requests, which are in this case HTTP requests. It&amp;#39;s a bit like middleware between the actual receiving of a request and what actually happens with it. The context is like the global context in which that servlet exists.&lt;/p&gt;

&lt;p&gt;Once I got a hold of that I obviously needed to be sure that I understood a lot of the actual Scala nuances, like traits. &lt;a href=&quot;https://twitter.github.io/scala_school/&quot;&gt;Twitter&amp;#39;s Scala School&lt;/a&gt; was pretty helpful for teaching the basics of the language. One thing about Scala is that there seems to be a lot of different ways of doing things. I could create a class that handle my url validation (basically creating a url class), or I could create a singleton object that would essentially be a function to do that for me.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the classed based way, with pattern matching. I really like pattern matching.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputUrl&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;^(https?|ftp|file)://[-a-zA-Z0-9+&amp;amp;@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&amp;amp;@#/%=~_|]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputUrl&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputUrl&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// use with new Url(&quot;http://www.google.com&quot;)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was the singleton object based way with pattern matching as well.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValidateUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;^(https?|ftp|file)://[-a-zA-Z0-9+&amp;amp;@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&amp;amp;@#/%=~_|]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputUrl&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inputUrl&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// use with ValidateUrl(&quot;http://www.google.com&quot;)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Knowing these trade-offs still isn&amp;#39;t quite clear to me, but I do love the more function approach of an object (the &lt;code&gt;new&lt;/code&gt; keyword isn&amp;#39;t something I really enjoy using). One of the things that I&amp;#39;ve really learned to love is companion objects, they make classes so much more functional.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.scala-sbt.org/&quot;&gt;Scala-sbt&lt;/a&gt; was actually really nice to use, it made packaging and versioning easy and dependency management was pretty straightforward as well.&lt;/p&gt;

&lt;p&gt;Now I wanted to really take the time to learn Scala because I&amp;#39;m using &lt;a href=&quot;http://spark.apache.org/&quot;&gt;Spark&lt;/a&gt; pretty heavily at work and in my research. I had used pySpark previously but was ready to step up to something a bit more professional grade. I&amp;#39;m using it now on a regular basis and writing production, tested, code that runs on a several node cluster.&lt;/p&gt;

&lt;p&gt;Now obviously there&amp;#39;s a lot more to learn, but this was another great little project that helped me learn a new language.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://billchambers.me/projects/2015/06/01/a-link-shortener-in-clojure.html&quot;&gt;Check out my other post on writing a link shortener in Clojure.&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Wed, 10 Jun 2015 00:00:00 -0700</pubDate>
				<link>/projects/2015/06/10/a-link-shortener-in-scala.html</link>
				<guid isPermaLink="true">/projects/2015/06/10/a-link-shortener-in-scala.html</guid>
			</item>
		
			<item>
				<title>A Simple Link Shortener in Clojure</title>
				<description>&lt;p&gt;&lt;em&gt;Recently I took it upon myself to dive into clojure. This post describes what my reaction was after writing a link shortener service using it. For those only interested in the code, &lt;a href=&quot;https://github.com/anabranch/JVM-Link-Shorteners/tree/master/clojure-link-shortener&quot;&gt;check out my github&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve always wanted to learn a lisp. I played with Scheme, Common Lisp, but never really dug deeply into it. Now knowing python extremely well, I wanted to try and scope an application reasonably and write it in &lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt;. For the unitiated, Clojure is a lisp written on the JVM.&lt;/p&gt;

&lt;p&gt;In Clojure&amp;#39;s own words:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Clojure is a dynamic programming language that targets the Java Virtual Machine (and the CLR, and JavaScript). It is designed to be a general-purpose language, combining the approachability and interactive development of a scripting language with an efficient and robust infrastructure for multithreaded programming. Clojure is a compiled language - it compiles directly to JVM bytecode, yet remains completely dynamic. Every feature supported by Clojure is supported at runtime. Clojure provides easy access to the Java frameworks, with optional type hints and type inference, to ensure that calls to Java can avoid reflection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had recently learned Java and figured that this would be a good way to branch out on the JVM. The application I decided to write was a link shortener - it&amp;#39;s a well scoped problem and touches a lot of interesting things that you&amp;#39;ll encounter working full time in the language. I forced a couple of requirements, I wanted to &lt;code&gt;jar&lt;/code&gt; it and be able to deploy it, I wanted it to connect to &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt; in order to store shortened links, and I wanted to make sure that I could deploy it with&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;. Lastly I wanted to make sure that I wrote tests as well.&lt;/p&gt;

&lt;p&gt;What I love about the link shortener application is that you&amp;#39;re going to run into plenty of little challenges writing the application.&lt;/p&gt;

&lt;p&gt;You&amp;#39;ll touch on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The documentation for the language itself&lt;/li&gt;
&lt;li&gt;The build tools&lt;/li&gt;
&lt;li&gt;Web app frameworks in the language&lt;/li&gt;
&lt;li&gt;Simple regular expressions in the language (url validation)&lt;/li&gt;
&lt;li&gt;HTML templating&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now this isn&amp;#39;t something that will take very long assuming you have basic programming skill and if you&amp;#39;re looking for more of a challenge there are tons of ways to add onto this application. One of the requirements is that code and tutorials are not to be followed - I made myself write it from scratch.&lt;/p&gt;

&lt;p&gt;Now there aren&amp;#39;t a lot of resources on the web that teach you how to write Clojure. However there were a couple of websites that really came in handy. &lt;a href=&quot;http://www.braveclojure.com/&quot;&gt;Brave Clojure was great&lt;/a&gt; as is &lt;a href=&quot;https://aphyr.com/posts/302-clojure-from-the-ground-up-basic-types&quot;&gt;Aphyr&amp;#39;s post on Clojure&lt;/a&gt;. And of course the Clojure docs. I leveraged their &lt;a href=&quot;http://clojure-doc.org/articles/tutorials/basic_web_development.html&quot;&gt;how to write a webapp in clojure&lt;/a&gt; as a rough guide but wasn&amp;#39;t doing any copying and pasting.&lt;/p&gt;

&lt;p&gt;There were a couple of things that blew me away about Clojure. Firstly it felt extremely natural, all functions are nice and short and I love polish notation. The regex wasn&amp;#39;t too bad (although I had to jump into some javadocs to understand limitations/capabilities) either. &lt;/p&gt;

&lt;p&gt;What took me a bit of getting used to psycologically was immutable data structures, which I&amp;#39;m now enamored with. Initially I couldn&amp;#39;t figure out the use case, but as I thought about it more, it makes a lot of sense. You make better design decisions and it makes things so much more predictable.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/technomancy/leiningen&quot;&gt;Leiningen&lt;/a&gt; was also awesome. It&amp;#39;s a great build too and made things super easy to work with.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/weavejester/hiccup&quot;&gt;Hiccup&lt;/a&gt; is honestly one of the most awesome libraries I&amp;#39;ve used. It was unbelievably easy to write composable functions that generated HTML so simply. It made writing functions easy and really Clojure really stands out in readability. Once you get past the parens everywhere, it really lends itself to quick understanding. &lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shorten&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;possible-link&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;controllers/set-link&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;possible-link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gen-shorten-failure&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gen-shorten-success&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;possible-link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have to shorten our params, we&amp;#39;ll let the link = the link from the input parameters and the possible link be what we get back from our controller. If we get null/false value generate our failure, if not generate success.&lt;/p&gt;

&lt;p&gt;I really loved that I got to avoid html almost completely and didn&amp;#39;t have to use some templating engine. All I really want is an HTML generator anyways.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re interested in deploying, you can &lt;a href=&quot;https://github.com/anabranch/JVM-Link-Shorteners&quot;&gt;download the repository&lt;/a&gt; and build and run it yourself. The only requirement is a Redis container which you can get from &lt;a href=&quot;https://registry.hub.docker.com/_/redis/&quot;&gt;Docker Registry&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then you just have to run.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker run --name new-red redis
docker run --name clj --link new-red:new-red -p 5000:5000 -d my-cloj
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Navigate to your Docker url on port 5000 and you should be good!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://billchambers.me/projects/2015/06/10/a-link-shortener-in-scala.html&quot;&gt;Check out my other post on writing a link shortener in Scala.&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Mon, 01 Jun 2015 00:00:00 -0700</pubDate>
				<link>/projects/2015/06/01/a-link-shortener-in-clojure.html</link>
				<guid isPermaLink="true">/projects/2015/06/01/a-link-shortener-in-clojure.html</guid>
			</item>
		
			<item>
				<title>Visualizing Crime in San Francisco during the 2014 World Series</title>
				<description>&lt;p&gt;&lt;em&gt;During the World Series, especially during the Giants win, there was a mass rioting and looting. For our data visualization class, a classmate, &lt;a href=&quot;http://controlaltdelete.io/&quot;&gt;John Semerdjian&lt;/a&gt;, and I made an interactive visualization of the crime in the city during each game.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://sfcrime.github.io/sfc-final/&quot;&gt;You can view in the entire visualization here on a github project site.&lt;/a&gt;. The write up includes descriptions of out process.&lt;/p&gt;

&lt;p&gt;Be sure to check out the final page as it&amp;#39;s a completely interactive visualization that allows you to explore and filter the data yourself.&lt;/p&gt;
</description>
				<pubDate>Wed, 20 May 2015 00:00:00 -0700</pubDate>
				<link>/projects/2015/05/20/san-francisco-crime-data-visualization.html</link>
				<guid isPermaLink="true">/projects/2015/05/20/san-francisco-crime-data-visualization.html</guid>
			</item>
		
			<item>
				<title>Plotting Your AWS Redshift Data with Plotly</title>
				<description>&lt;p&gt;&lt;a href=&quot;https://plot.ly/ipython-notebooks/amazon-redshift/&quot;&gt;This was a post that I did for Plotly covering the basics of plotting Data from an AWS Redshift cluster with plotly.&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Fri, 08 May 2015 00:00:00 -0700</pubDate>
				<link>/tutorials/2015/05/08/plotting-aws-redshift-data-with-plotly.html</link>
				<guid isPermaLink="true">/tutorials/2015/05/08/plotting-aws-redshift-data-with-plotly.html</guid>
			</item>
		
			<item>
				<title>Plotting Spark DataFrames with Plotly</title>
				<description>&lt;p&gt;&lt;a href=&quot;https://plot.ly/ipython-notebooks/apache-spark/&quot;&gt;This was a post that I did for Plotly covering the basics of plotting Spark DataFrames with plotly.&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Mon, 04 May 2015 00:00:00 -0700</pubDate>
				<link>/tutorials/2015/05/04/Apache-Spark-and-Plotly-Graphing.html</link>
				<guid isPermaLink="true">/tutorials/2015/05/04/Apache-Spark-and-Plotly-Graphing.html</guid>
			</item>
		
			<item>
				<title>Visualizing Flights Origins and Departures with d3.js</title>
				<description>&lt;p&gt;This was built for a class project in my &lt;code&gt;Information Visualization&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;My goals were pretty straightforward. I wanted to try a multidimensional dataset - with a lot of different connections.I wanted a nice way of exploring it that was relatively simple - clicking to filter, allowing for visual exploration. I would optimally would have liked to include a visualization like this one but I couldn&amp;#39;t figure out how to do that without just copying and pasting the code. It took me a really long time to figure out the whole join thing, especially with a key function but I got it eventually as you can see in the &lt;code&gt;renderText&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;I tried my best to write all my code by hand, I did virtually no copying and pasting except for the fade function that is in the &lt;code&gt;Chord Tutorial&lt;/code&gt; reference below - it&amp;#39;s fairly straightforward regardless.&lt;/p&gt;

&lt;p&gt;This was my favorite assignment, I wish we would have had more time to use d3.&lt;/p&gt;

&lt;p&gt;The visualization contains data about the flights that happened in June 1994. Clicking on one of the edge nodes (the groups) will change the visualization to only include that airport and any flights that go in and out of that airport. Hovering over it will show you what you might expect.&lt;/p&gt;

&lt;p&gt;Scroll through this list to select airports that you want to explore! Hovering over one of the edges of the diagram will highlight which airport you are hovering over. Clicking it with focus in on just that airport. Airports are listed in order clockwise from 12:00.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://soundsuggest.wordpress.com/2012/12/26/d3-js-javascript-library-chord-diagram-example/&quot;&gt;Chord Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mbostock/d3/wiki/Chord-Layout&quot;&gt;Chord Layout Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/article&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class='row'&gt;
&lt;div class='twelve columns'&gt;
 &lt;h3&gt;June 1994 Flight Data&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class='row'&gt;
 &lt;div id='info' class='twelve columns'&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class='row'&gt;
&lt;div class='two columns' style='height:10px;'&gt;
&lt;/div&gt;
&lt;div class='eight columns'&gt;
 &lt;div id='chart'&gt;&lt;/div&gt;
&lt;/div&gt;
 &lt;/div&gt;
 &lt;script src='https://code.jquery.com/jquery-2.1.3.min.js'&gt;&lt;/script&gt;
  &lt;script src='https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.2/underscore-min.js'&gt;&lt;/script&gt;
  &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js&quot;&gt;&lt;/script&gt;
&lt;script src='/js/flight-viz.js'&gt;&lt;/script&gt;
&lt;div class='row'&gt;
    &lt;div class='ten offset-by-one columns'&gt;
&lt;article class='post'&gt;&lt;/p&gt;
</description>
				<pubDate>Sun, 05 Apr 2015 00:00:00 -0700</pubDate>
				<link>/projects/2015/04/05/d3-visualization-of-different-flights.html</link>
				<guid isPermaLink="true">/projects/2015/04/05/d3-visualization-of-different-flights.html</guid>
			</item>
		
	</channel>
</rss>
